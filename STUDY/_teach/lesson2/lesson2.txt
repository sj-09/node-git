Node.js模块系统
为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。
模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。


Node.js的模块分为两类，一类为原生（核心）模块，一类为文件模块。


Node.js中模块可以通过文件路径或名字获取模块的引用。模块的引用会映射到一个js文件路径，除非它是一个Node内置模块。Node的内置模块公开了一些常用的API给开发者，并且它们在Node进程开始的时候就预加载了。



----------------------------------------------------
* require node模块的载入及缓存机制

载入内置模块（A Core Module）  http、fs、path 等原生模块
载入文件模块（A File Module） ./mod或../mod 相对路径的文件模块
载入文件目录模块（A Folder Module）  /pathtomodule/mod  绝对路径的文件模块
载入node_modules里的模块  mod 非原生模块的文件模块
自动缓存已载入模块
----------------------------------------------------

1、从文件模块缓存中加载
尽管原生模块与文件模块的优先级不同，但是都不会优先于从文件模块的缓存中加载已经存在的模块。
----------------------------------------------------
2、从原生模块加载
原生模块的优先级仅次于文件模块缓存的优先级。require方法在解析文件名之后，优先检查模块是否在原生模块列表中。以http模块为例，尽管在目录下存在一个http/http.js/http.node/http.json文件，require("http")都不会从这些文件中加载，而是从原生模块中加载。
原生模块也有一个缓存区，同样也是优先从缓存区加载。如果缓存区没有被加载过，则调用原生模块的加载方式进行加载和执行。
----------------------------------------------------
3、从文件加载
当文件模块缓存中不存在，而且不是原生模块的时候，Node.js会解析require方法传入的参数，并从文件系统中加载实际的文件，加载过程中的包装和编译细节在前一节中已经介绍过，这里我们将详细描述查找文件模块的过程，其中，也有一些细节值得知晓。

----------------------------------------------------



使用buffer类处理二进制数据

概念：在node.js中，Buffer类是一个可以在任何模块被利用的全局类，不需要为该类的使用而加载任何模块。

new Buffer()
buf.toString([encoding],[start],[end]);
buf.write(string,[offset],[length],[encoding]);


